using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Entitas.InstallerGenerator2.Editor.Models;

namespace Entitas.InstallerGenerator2.Editor.CodeGenerators
{
    public static class FeatureInstallerGenerator
    {
        public static string GetInstaller(
            string name,
            string ns,
            string methods,
            string body
        )
        {
            return $@"{ns}
using Zenject; 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.InstallerGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecs.Installers 
{{
	public static class {name} 
    {{
		public static void Install(DiContainer container, bool isDebug = true)
        {{
{methods}
		}}

{body}	
    }}
}}";
        }

        public static string GetMethodCall(string name)
        {
            return $"\t\t\t{name}(container, isDebug);";
        }

        public static string GetMethodBody(string name, string body)
        {
            return $"\t\tprivate static void {name}(DiContainer container, bool isDebug)\n\t\t{{{body}\n\t\t}}";
        }

        public static string GenerateInstaller(string name, Dictionary<Enum, List<TypeElement>> container, List<string> nameSpaces)
        {
            var nameSpacesSorted = nameSpaces
                .Distinct()
                .Where(nameSpace => !string.IsNullOrWhiteSpace(nameSpace))
                .OrderBy(nameSpace => nameSpace);

            var builtNameSpaces = String.Join("\n", nameSpacesSorted.Select(s => "using " + s + ";"));

            var notEmptyTypes = container.Select(kvp => new
                {
                    methodName = kvp.Key.ToString(),
                    types = kvp.Value,
                    binds = SystemBindGenerator.GetBinds(kvp.Value)
                })
                .Where(s => s.binds.Any())
                .ToList();

            var calls = notEmptyTypes.Select(s => GetMethodCall(s.methodName));
            var builtCalls = string.Join("\n", calls);

            var body = notEmptyTypes.Select(s => GetMethodBody(s.methodName, string.Join("\n", s.binds)));
            var builtBody = string.Join("\n\n", body);

            return GetInstaller(name, builtNameSpaces, builtCalls, builtBody);
        }
    }
}